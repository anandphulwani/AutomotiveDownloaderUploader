/* eslint-disable import/extensions */
import { config } from '../configs/config.js';
import { lgu, lgc, lge, lgw, lgi, lgv, lgd, lgs } from '../functions/loggersupportive.js';
import { getColPosOnTerminal } from '../functions/terminal.js';
/* eslint-enable import/extensions */

lge('Logging message 01');
lge('Logging message 02', true);
lge('Logging message 03', true, new Error('Error to be test 03'));
lge('Logging message 04', new Error('Error to be test 04'));
lge('Logging message 05', new Error('Error to be test 05'), true);
lge(new Error('Error to be test 06'));
console.log('------------------------------------------------------------');
lge('Logging message 02', false);
lge('Logging message 03', false, new Error('Error to be test 03'));
lge('Logging message 05', new Error('Error to be test 05'), false);
lge(new Error('Error to be test 06'));
console.log('------------------------------------------------------------');
lge('Logging message 01');
lge('Logging message 02', false);
lge('Logging message 03', false, new Error('Error to be test 03'));
lge('Logging message 04', new Error('Error to be test 04'));
lge('Logging message 05', new Error('Error to be test 05'), false);
lge(new Error('Error to be test 06'));
console.log('------------------------------------------------------------');
lgc('Logging message 01');
lgc('Logging message 02', true);
lgc('Logging message 03', true, new Error('Error to be test 03'));
lgc('Logging message 04', new Error('Error to be test 04'));
lgc('Logging message 05', new Error('Error to be test 05'), true);
lgc(new Error('Error to be test 06'));
console.log('------------------------------------------------------------');
lgc('Logging message 02', false);
lgc('Logging message 03', false, new Error('Error to be test 03'));
lgc('Logging message 05', new Error('Error to be test 05'), false);
lgc(new Error('Error to be test 06'));
console.log('------------------------------------------------------------');
lgc('Logging message 01');
lgc('Logging message 02', false);
lgc('Logging message 03', false, new Error('Error to be test 03'));
lgc('Logging message 04', new Error('Error to be test 04'));
lgc('Logging message 05', new Error('Error to be test 05'), false);
lgc(new Error('Error to be test 06'));
console.log('------------------------------------------------------------');
const errorToTest = new Error('Error to be test here!');
lgu('Logging unreachable error message', errorToTest);
lgc('Logging catched error message', errorToTest);
lge('Logging error message', errorToTest);
lgw('Logging warning message');
lgi('Logging info message');
lgv('Logging verbose message');
lgd('Logging debug message');
lgs('Logging silly message');
console.log('------------------------------------------------------------');
lgu('Logging unreachable error message', errorToTest, false);
lgc('Logging catched error message', errorToTest, false);
lge('Logging error message', errorToTest, false);
lgw('Logging warning message', false);
lgi('Logging info message', false);
lgv('Logging verbose message', false);
lgd('Logging debug message', false);
lgs('Logging silly message', false);
console.log('------------------------------------------------------------');
lgu('Logging unreachable error message');
lgc('Logging catched error message');
lge('Logging error message');
lgw('Logging warning message');
lgi('Logging info message');
lgv('Logging verbose message');
lgd('Logging debug message');
lgs('Logging silly message');
